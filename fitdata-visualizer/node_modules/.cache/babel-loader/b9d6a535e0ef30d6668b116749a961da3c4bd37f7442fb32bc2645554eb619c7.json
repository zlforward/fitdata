{"ast":null,"code":"import*as XLSX from'xlsx';// 将列索引转换为Excel列名 (0->A, 1->B, etc.)\nconst getColumnName=index=>{let result='';while(index>=0){result=String.fromCharCode(65+index%26)+result;index=Math.floor(index/26)-1;}return result;};// 解析灰阶数据：从B1开始，每隔22个单元格获取下一个值\nexport const parseGrayScaleData=worksheet=>{const values=[];const positions=[];let currentRow=1;// 从第1行开始\nconst column='B';// B列\nwhile(true){const cellAddress=\"\".concat(column).concat(currentRow);const cell=worksheet[cellAddress];// 如果单元格为空或不存在，停止解析\nif(!cell||cell.v===undefined||cell.v===null||cell.v===''){break;}const value=typeof cell.v==='number'?cell.v:parseFloat(cell.v.toString());if(!isNaN(value)){values.push(value);positions.push(cellAddress);}currentRow+=22;// 每隔22个单元格\n}return{values,positions};};// 解析亮度数据块：按照规律生成所有数据块，每隔22行一个32x20的矩阵\nexport const parseBrightnessBlocks=worksheet=>{const blocks=[];let blockIndex=1;let currentStartRow=2;// 从第2行开始\n// 持续解析直到找不到有效数据\nwhile(true){const currentEndRow=currentStartRow+19;// 每个块20行数据\nconst data=[];let hasValidData=false;// 解析32列 (A到AF) x 20行的数据\nfor(let row=currentStartRow;row<=currentEndRow;row++){const rowData=[];// 从A列(0)到AF列(31)，共32列\nfor(let col=0;col<32;col++){const columnName=getColumnName(col);const cellAddress=\"\".concat(columnName).concat(row);const cell=worksheet[cellAddress];let value=0;if(cell&&cell.v!==undefined&&cell.v!==null&&cell.v!==''){const parsedValue=typeof cell.v==='number'?cell.v:parseFloat(cell.v.toString());if(!isNaN(parsedValue)){value=parsedValue;hasValidData=true;}}rowData.push(value);}data.push(rowData);}// 如果这个块没有任何有效数据，停止解析\nif(!hasValidData){break;}// 计算中心像素值 (32x20矩阵的中心位置为第16列，第10行)\nconst centerRow=9;// 第10行 (0-based index)\nconst centerCol=15;// 第16列 (0-based index)\nconst centerPixelValue=data[centerRow]&&data[centerRow][centerCol]?data[centerRow][centerCol]:0;// 计算归一化数据（以中心像素为基准）\nconst normalizedData=data.map(row=>row.map(value=>centerPixelValue!==0?value/centerPixelValue:0));blocks.push({data,normalizedData,startRow:currentStartRow,endRow:currentEndRow,label:\"\\u6570\\u636E\\u5757 \".concat(blockIndex,\" (A\").concat(currentStartRow,\"-AF\").concat(currentEndRow,\")\"),centerPixelValue});blockIndex++;currentStartRow+=22;// 每隔22行开始下一个数据块\n}return blocks;};// 主解析函数\nexport const parseExcelData=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=e=>{try{var _e$target;const data=new Uint8Array((_e$target=e.target)===null||_e$target===void 0?void 0:_e$target.result);const workbook=XLSX.read(data,{type:'array'});// 获取第一个工作表\nconst sheetName=workbook.SheetNames[0];const worksheet=workbook.Sheets[sheetName];// 解析数据\nconst grayScale=parseGrayScaleData(worksheet);const brightnessBlocks=parseBrightnessBlocks(worksheet);resolve({grayScale,brightnessBlocks});}catch(error){reject(error);}};reader.onerror=()=>{reject(new Error('文件读取失败'));};reader.readAsArrayBuffer(file);});};","map":{"version":3,"names":["XLSX","getColumnName","index","result","String","fromCharCode","Math","floor","parseGrayScaleData","worksheet","values","positions","currentRow","column","cellAddress","concat","cell","v","undefined","value","parseFloat","toString","isNaN","push","parseBrightnessBlocks","blocks","blockIndex","currentStartRow","currentEndRow","data","hasValidData","row","rowData","col","columnName","parsedValue","centerRow","centerCol","centerPixelValue","normalizedData","map","startRow","endRow","label","parseExcelData","file","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","Uint8Array","target","workbook","read","type","sheetName","SheetNames","Sheets","grayScale","brightnessBlocks","error","onerror","Error","readAsArrayBuffer"],"sources":["D:/source/fitdata/fitdata-visualizer/src/utils/dataParser.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\n\nexport interface GrayScaleData {\n  values: number[];\n  positions: string[];\n}\n\nexport interface BrightnessBlock {\n  data: number[][];\n  normalizedData?: number[][];\n  startRow: number;\n  endRow: number;\n  label: string;\n  centerPixelValue: number;\n}\n\nexport interface ParsedData {\n  grayScale: GrayScaleData;\n  brightnessBlocks: BrightnessBlock[];\n}\n\n// 将列索引转换为Excel列名 (0->A, 1->B, etc.)\nconst getColumnName = (index: number): string => {\n  let result = '';\n  while (index >= 0) {\n    result = String.fromCharCode(65 + (index % 26)) + result;\n    index = Math.floor(index / 26) - 1;\n  }\n  return result;\n};\n\n// 解析灰阶数据：从B1开始，每隔22个单元格获取下一个值\nexport const parseGrayScaleData = (worksheet: XLSX.WorkSheet): GrayScaleData => {\n  const values: number[] = [];\n  const positions: string[] = [];\n  \n  let currentRow = 1; // 从第1行开始\n  const column = 'B'; // B列\n  \n  while (true) {\n    const cellAddress = `${column}${currentRow}`;\n    const cell = worksheet[cellAddress];\n    \n    // 如果单元格为空或不存在，停止解析\n    if (!cell || cell.v === undefined || cell.v === null || cell.v === '') {\n      break;\n    }\n    \n    const value = typeof cell.v === 'number' ? cell.v : parseFloat(cell.v.toString());\n    if (!isNaN(value)) {\n      values.push(value);\n      positions.push(cellAddress);\n    }\n    \n    currentRow += 22; // 每隔22个单元格\n  }\n  \n  return { values, positions };\n};\n\n// 解析亮度数据块：按照规律生成所有数据块，每隔22行一个32x20的矩阵\nexport const parseBrightnessBlocks = (worksheet: XLSX.WorkSheet): BrightnessBlock[] => {\n  const blocks: BrightnessBlock[] = [];\n  \n  let blockIndex = 1;\n  let currentStartRow = 2; // 从第2行开始\n  \n  // 持续解析直到找不到有效数据\n  while (true) {\n    const currentEndRow = currentStartRow + 19; // 每个块20行数据\n    const data: number[][] = [];\n    let hasValidData = false;\n    \n    // 解析32列 (A到AF) x 20行的数据\n    for (let row = currentStartRow; row <= currentEndRow; row++) {\n      const rowData: number[] = [];\n      \n      // 从A列(0)到AF列(31)，共32列\n      for (let col = 0; col < 32; col++) {\n        const columnName = getColumnName(col);\n        const cellAddress = `${columnName}${row}`;\n        const cell = worksheet[cellAddress];\n        \n        let value = 0;\n        if (cell && cell.v !== undefined && cell.v !== null && cell.v !== '') {\n          const parsedValue = typeof cell.v === 'number' ? cell.v : parseFloat(cell.v.toString());\n          if (!isNaN(parsedValue)) {\n            value = parsedValue;\n            hasValidData = true;\n          }\n        }\n        \n        rowData.push(value);\n      }\n      \n      data.push(rowData);\n    }\n    \n    // 如果这个块没有任何有效数据，停止解析\n    if (!hasValidData) {\n      break;\n    }\n    \n    // 计算中心像素值 (32x20矩阵的中心位置为第16列，第10行)\n    const centerRow = 9; // 第10行 (0-based index)\n    const centerCol = 15; // 第16列 (0-based index)\n    const centerPixelValue = data[centerRow] && data[centerRow][centerCol] ? data[centerRow][centerCol] : 0;\n    \n    // 计算归一化数据（以中心像素为基准）\n    const normalizedData: number[][] = data.map(row => \n      row.map(value => centerPixelValue !== 0 ? value / centerPixelValue : 0)\n    );\n    \n    blocks.push({\n      data,\n      normalizedData,\n      startRow: currentStartRow,\n      endRow: currentEndRow,\n      label: `数据块 ${blockIndex} (A${currentStartRow}-AF${currentEndRow})`,\n      centerPixelValue\n    });\n    \n    blockIndex++;\n    currentStartRow += 22; // 每隔22行开始下一个数据块\n  }\n  \n  return blocks;\n};\n\n// 主解析函数\nexport const parseExcelData = (file: File): Promise<ParsedData> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array' });\n        \n        // 获取第一个工作表\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        \n        // 解析数据\n        const grayScale = parseGrayScaleData(worksheet);\n        const brightnessBlocks = parseBrightnessBlocks(worksheet);\n        \n        resolve({\n          grayScale,\n          brightnessBlocks\n        });\n      } catch (error) {\n        reject(error);\n      }\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('文件读取失败'));\n    };\n    \n    reader.readAsArrayBuffer(file);\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}