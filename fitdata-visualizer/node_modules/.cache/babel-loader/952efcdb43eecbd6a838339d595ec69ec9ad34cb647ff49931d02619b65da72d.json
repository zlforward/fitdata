{"ast":null,"code":"// 曲线拟合工具类\n// 计算R²决定系数\nconst calculateRSquared=(actual,predicted)=>{const actualMean=actual.reduce((sum,val)=>sum+val,0)/actual.length;const totalSumSquares=actual.reduce((sum,val)=>sum+Math.pow(val-actualMean,2),0);const residualSumSquares=actual.reduce((sum,val,i)=>sum+Math.pow(val-predicted[i],2),0);return 1-residualSumSquares/totalSumSquares;};// 计算均方根误差 (RMSE)\nconst calculateRMSE=(actual,predicted)=>{const sumSquaredErrors=actual.reduce((sum,val,i)=>sum+Math.pow(val-predicted[i],2),0);return Math.sqrt(sumSquaredErrors/actual.length);};// 计算平均绝对误差 (MAE)\nconst calculateMAE=(actual,predicted)=>{const sumAbsoluteErrors=actual.reduce((sum,val,i)=>sum+Math.abs(val-predicted[i]),0);return sumAbsoluteErrors/actual.length;};// 计算最大误差\nconst calculateMaxError=(actual,predicted)=>{return Math.max(...actual.map((val,i)=>Math.abs(val-predicted[i])));};// 对数拟合: y = a * ln(x) + b\nexport const logarithmicFitting=data=>{const{x,y}=data;const n=x.length;// 过滤掉x <= 0的点\nconst validIndices=x.map((val,i)=>val>0?i:-1).filter(i=>i!==-1);const validX=validIndices.map(i=>x[i]);const validY=validIndices.map(i=>y[i]);const validN=validX.length;if(validN<2){return{type:'logarithmic',formula:'无法拟合（数据点不足）',coefficients:[0,0],rSquared:0,predictedValues:new Array(n).fill(0),rmse:0,mae:0,maxError:0};}const sumLnX=validX.reduce((sum,val)=>sum+Math.log(val),0);const sumY=validY.reduce((sum,val)=>sum+val,0);const sumLnXY=validX.reduce((sum,val,i)=>sum+Math.log(val)*validY[i],0);const sumLnX2=validX.reduce((sum,val)=>sum+Math.pow(Math.log(val),2),0);const a=(validN*sumLnXY-sumLnX*sumY)/(validN*sumLnX2-Math.pow(sumLnX,2));const b=(sumY-a*sumLnX)/validN;const predictedValues=x.map(val=>val>0?a*Math.log(val)+b:0);const rSquared=calculateRSquared(y,predictedValues);const rmse=calculateRMSE(y,predictedValues);const mae=calculateMAE(y,predictedValues);const maxError=calculateMaxError(y,predictedValues);return{type:'logarithmic',formula:\"y = \".concat(a.toFixed(6),\" * ln(x) + \").concat(b.toFixed(6)),coefficients:[a,b],rSquared,predictedValues,rmse,mae,maxError};};// 指数拟合: y = a * e^(b*x)\nexport const exponentialFitting=data=>{const{x,y}=data;const n=x.length;// 过滤掉y <= 0的点\nconst validIndices=y.map((val,i)=>val>0?i:-1).filter(i=>i!==-1);const validX=validIndices.map(i=>x[i]);const validY=validIndices.map(i=>y[i]);const validN=validX.length;if(validN<2){return{type:'exponential',formula:'无法拟合（数据点不足）',coefficients:[0,0],rSquared:0,predictedValues:new Array(n).fill(0),rmse:0,mae:0,maxError:0};}const sumX=validX.reduce((sum,val)=>sum+val,0);const sumLnY=validY.reduce((sum,val)=>sum+Math.log(val),0);const sumXLnY=validX.reduce((sum,val,i)=>sum+val*Math.log(validY[i]),0);const sumX2=validX.reduce((sum,val)=>sum+Math.pow(val,2),0);const b=(validN*sumXLnY-sumX*sumLnY)/(validN*sumX2-Math.pow(sumX,2));const lnA=(sumLnY-b*sumX)/validN;const a=Math.exp(lnA);const predictedValues=x.map(val=>a*Math.exp(b*val));const rSquared=calculateRSquared(y,predictedValues);const rmse=calculateRMSE(y,predictedValues);const mae=calculateMAE(y,predictedValues);const maxError=calculateMaxError(y,predictedValues);return{type:'exponential',formula:\"y = \".concat(a.toFixed(6),\" * e^(\").concat(b.toFixed(6),\" * x)\"),coefficients:[a,b],rSquared,predictedValues,rmse,mae,maxError};};// 三次多项式拟合: y = ax³ + bx² + cx + d\nexport const polynomialFitting=data=>{const{x,y}=data;const n=x.length;if(n<4){return{type:'polynomial',formula:'无法拟合（数据点不足）',coefficients:[0,0,0,0],rSquared:0,predictedValues:new Array(n).fill(0),rmse:0,mae:0,maxError:0};}// 构建矩阵方程 A * coeffs = B\nconst A=[];const B=[];// 计算各项和\nconst sums={x0:n,x1:x.reduce((sum,val)=>sum+val,0),x2:x.reduce((sum,val)=>sum+Math.pow(val,2),0),x3:x.reduce((sum,val)=>sum+Math.pow(val,3),0),x4:x.reduce((sum,val)=>sum+Math.pow(val,4),0),x5:x.reduce((sum,val)=>sum+Math.pow(val,5),0),x6:x.reduce((sum,val)=>sum+Math.pow(val,6),0),y:y.reduce((sum,val)=>sum+val,0),xy:x.reduce((sum,val,i)=>sum+val*y[i],0),x2y:x.reduce((sum,val,i)=>sum+Math.pow(val,2)*y[i],0),x3y:x.reduce((sum,val,i)=>sum+Math.pow(val,3)*y[i],0)};// 构建系数矩阵\nA.push([sums.x6,sums.x5,sums.x4,sums.x3]);A.push([sums.x5,sums.x4,sums.x3,sums.x2]);A.push([sums.x4,sums.x3,sums.x2,sums.x1]);A.push([sums.x3,sums.x2,sums.x1,sums.x0]);B.push(sums.x3y);B.push(sums.x2y);B.push(sums.xy);B.push(sums.y);// 高斯消元法求解\nconst coeffs=gaussianElimination(A,B);if(!coeffs){return{type:'polynomial',formula:'无法拟合（矩阵奇异）',coefficients:[0,0,0,0],rSquared:0,predictedValues:new Array(n).fill(0),rmse:0,mae:0,maxError:0};}const[a,b,c,d]=coeffs;const predictedValues=x.map(val=>a*Math.pow(val,3)+b*Math.pow(val,2)+c*val+d);const rSquared=calculateRSquared(y,predictedValues);const rmse=calculateRMSE(y,predictedValues);const mae=calculateMAE(y,predictedValues);const maxError=calculateMaxError(y,predictedValues);return{type:'polynomial',formula:\"y = \".concat(a.toFixed(6),\"x\\xB3 + \").concat(b.toFixed(6),\"x\\xB2 + \").concat(c.toFixed(6),\"x + \").concat(d.toFixed(6)),coefficients:[a,b,c,d],rSquared,predictedValues,rmse,mae,maxError};};// 幂函数拟合: y = a * x^b\nexport const powerFitting=data=>{const{x,y}=data;const n=x.length;// 过滤掉x <= 0或y <= 0的点\nconst validIndices=x.map((val,i)=>val>0&&y[i]>0?i:-1).filter(i=>i!==-1);const validX=validIndices.map(i=>x[i]);const validY=validIndices.map(i=>y[i]);const validN=validX.length;if(validN<2){return{type:'power',formula:'无法拟合（数据点不足）',coefficients:[0,0],rSquared:0,predictedValues:new Array(n).fill(0),rmse:0,mae:0,maxError:0};}const sumLnX=validX.reduce((sum,val)=>sum+Math.log(val),0);const sumLnY=validY.reduce((sum,val)=>sum+Math.log(val),0);const sumLnXLnY=validX.reduce((sum,val,i)=>sum+Math.log(val)*Math.log(validY[i]),0);const sumLnX2=validX.reduce((sum,val)=>sum+Math.pow(Math.log(val),2),0);const b=(validN*sumLnXLnY-sumLnX*sumLnY)/(validN*sumLnX2-Math.pow(sumLnX,2));const lnA=(sumLnY-b*sumLnX)/validN;const a=Math.exp(lnA);const predictedValues=x.map(val=>val>0?a*Math.pow(val,b):0);const rSquared=calculateRSquared(y,predictedValues);const rmse=calculateRMSE(y,predictedValues);const mae=calculateMAE(y,predictedValues);const maxError=calculateMaxError(y,predictedValues);return{type:'power',formula:\"y = \".concat(a.toFixed(6),\" * x^\").concat(b.toFixed(6)),coefficients:[a,b],rSquared,predictedValues,rmse,mae,maxError};};// 二元多项式拟合: y = a*x² + b*x + c\nexport const bivariateFitting=data=>{const{x,y}=data;const n=x.length;if(n<3){return{type:'bivariate',formula:'无法拟合（数据点不足）',coefficients:[0,0,0],rSquared:0,predictedValues:new Array(n).fill(0),rmse:0,mae:0,maxError:0};}// 构建矩阵方程 A * coeffs = B\nconst A=[];const B=[];// 计算各项和\nconst sums={x0:n,x1:x.reduce((sum,val)=>sum+val,0),x2:x.reduce((sum,val)=>sum+Math.pow(val,2),0),x3:x.reduce((sum,val)=>sum+Math.pow(val,3),0),x4:x.reduce((sum,val)=>sum+Math.pow(val,4),0),y:y.reduce((sum,val)=>sum+val,0),xy:x.reduce((sum,val,i)=>sum+val*y[i],0),x2y:x.reduce((sum,val,i)=>sum+Math.pow(val,2)*y[i],0)};// 构建系数矩阵 (二次多项式)\nA.push([sums.x4,sums.x3,sums.x2]);A.push([sums.x3,sums.x2,sums.x1]);A.push([sums.x2,sums.x1,sums.x0]);B.push(sums.x2y);B.push(sums.xy);B.push(sums.y);// 高斯消元法求解\nconst coeffs=gaussianElimination(A,B);if(!coeffs){return{type:'bivariate',formula:'无法拟合（矩阵奇异）',coefficients:[0,0,0],rSquared:0,predictedValues:new Array(n).fill(0),rmse:0,mae:0,maxError:0};}const[a,b,c]=coeffs;const predictedValues=x.map(val=>a*Math.pow(val,2)+b*val+c);const rSquared=calculateRSquared(y,predictedValues);const rmse=calculateRMSE(y,predictedValues);const mae=calculateMAE(y,predictedValues);const maxError=calculateMaxError(y,predictedValues);return{type:'bivariate',formula:\"y = \".concat(a.toFixed(6),\"x\\xB2 + \").concat(b.toFixed(6),\"x + \").concat(c.toFixed(6)),coefficients:[a,b,c],rSquared,predictedValues,rmse,mae,maxError};};// 高斯消元法求解线性方程组\nconst gaussianElimination=(A,B)=>{const n=A.length;const augmented=A.map((row,i)=>[...row,B[i]]);// 前向消元\nfor(let i=0;i<n;i++){// 寻找主元\nlet maxRow=i;for(let k=i+1;k<n;k++){if(Math.abs(augmented[k][i])>Math.abs(augmented[maxRow][i])){maxRow=k;}}// 交换行\n[augmented[i],augmented[maxRow]]=[augmented[maxRow],augmented[i]];// 检查是否为奇异矩阵\nif(Math.abs(augmented[i][i])<1e-10){return null;}// 消元\nfor(let k=i+1;k<n;k++){const factor=augmented[k][i]/augmented[i][i];for(let j=i;j<=n;j++){augmented[k][j]-=factor*augmented[i][j];}}}// 回代\nconst solution=new Array(n).fill(0);for(let i=n-1;i>=0;i--){solution[i]=augmented[i][n];for(let j=i+1;j<n;j++){solution[i]-=augmented[i][j]*solution[j];}solution[i]/=augmented[i][i];}return solution;};// 执行所有拟合算法\nexport const performAllFittings=data=>{return[logarithmicFitting(data),exponentialFitting(data),polynomialFitting(data),powerFitting(data),bivariateFitting(data)];};","map":{"version":3,"names":["calculateRSquared","actual","predicted","actualMean","reduce","sum","val","length","totalSumSquares","Math","pow","residualSumSquares","i","calculateRMSE","sumSquaredErrors","sqrt","calculateMAE","sumAbsoluteErrors","abs","calculateMaxError","max","map","logarithmicFitting","data","x","y","n","validIndices","filter","validX","validY","validN","type","formula","coefficients","rSquared","predictedValues","Array","fill","rmse","mae","maxError","sumLnX","log","sumY","sumLnXY","sumLnX2","a","b","concat","toFixed","exponentialFitting","sumX","sumLnY","sumXLnY","sumX2","lnA","exp","polynomialFitting","A","B","sums","x0","x1","x2","x3","x4","x5","x6","xy","x2y","x3y","push","coeffs","gaussianElimination","c","d","powerFitting","sumLnXLnY","bivariateFitting","augmented","row","maxRow","k","factor","j","solution","performAllFittings"],"sources":["D:/source/fitdata/fitdata-visualizer/src/utils/curveFitting.ts"],"sourcesContent":["// 曲线拟合工具类\n\nexport interface FittingResult {\n  type: 'logarithmic' | 'exponential' | 'polynomial' | 'power' | 'bivariate';\n  formula: string;\n  coefficients: number[];\n  rSquared: number;\n  predictedValues: number[];\n  rmse: number; // 均方根误差\n  mae: number;  // 平均绝对误差\n  maxError: number; // 最大误差\n}\n\nexport interface FittingData {\n  x: number[]; // 中心像素值\n  y: number[]; // 灰阶值\n}\n\n// 计算R²决定系数\nconst calculateRSquared = (actual: number[], predicted: number[]): number => {\n  const actualMean = actual.reduce((sum, val) => sum + val, 0) / actual.length;\n  const totalSumSquares = actual.reduce((sum, val) => sum + Math.pow(val - actualMean, 2), 0);\n  const residualSumSquares = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  \n  return 1 - (residualSumSquares / totalSumSquares);\n};\n\n// 计算均方根误差 (RMSE)\nconst calculateRMSE = (actual: number[], predicted: number[]): number => {\n  const sumSquaredErrors = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  return Math.sqrt(sumSquaredErrors / actual.length);\n};\n\n// 计算平均绝对误差 (MAE)\nconst calculateMAE = (actual: number[], predicted: number[]): number => {\n  const sumAbsoluteErrors = actual.reduce((sum, val, i) => sum + Math.abs(val - predicted[i]), 0);\n  return sumAbsoluteErrors / actual.length;\n};\n\n// 计算最大误差\nconst calculateMaxError = (actual: number[], predicted: number[]): number => {\n  return Math.max(...actual.map((val, i) => Math.abs(val - predicted[i])));\n};\n\n// 对数拟合: y = a * ln(x) + b\nexport const logarithmicFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉x <= 0的点\n  const validIndices = x.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'logarithmic',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumY = validY.reduce((sum, val) => sum + val, 0);\n  const sumLnXY = validX.reduce((sum, val, i) => sum + Math.log(val) * validY[i], 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  \n  const a = (validN * sumLnXY - sumLnX * sumY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const b = (sumY - a * sumLnX) / validN;\n  \n  const predictedValues = x.map(val => val > 0 ? a * Math.log(val) + b : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'logarithmic',\n    formula: `y = ${a.toFixed(6)} * ln(x) + ${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 指数拟合: y = a * e^(b*x)\nexport const exponentialFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉y <= 0的点\n  const validIndices = y.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'exponential',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const sumX = validX.reduce((sum, val) => sum + val, 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumXLnY = validX.reduce((sum, val, i) => sum + val * Math.log(validY[i]), 0);\n  const sumX2 = validX.reduce((sum, val) => sum + Math.pow(val, 2), 0);\n  \n  const b = (validN * sumXLnY - sumX * sumLnY) / (validN * sumX2 - Math.pow(sumX, 2));\n  const lnA = (sumLnY - b * sumX) / validN;\n  const a = Math.exp(lnA);\n  \n  const predictedValues = x.map(val => a * Math.exp(b * val));\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'exponential',\n    formula: `y = ${a.toFixed(6)} * e^(${b.toFixed(6)} * x)`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 三次多项式拟合: y = ax³ + bx² + cx + d\nexport const polynomialFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  if (n < 4) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  // 构建矩阵方程 A * coeffs = B\n  const A: number[][] = [];\n  const B: number[] = [];\n  \n  // 计算各项和\n  const sums = {\n    x0: n,\n    x1: x.reduce((sum, val) => sum + val, 0),\n    x2: x.reduce((sum, val) => sum + Math.pow(val, 2), 0),\n    x3: x.reduce((sum, val) => sum + Math.pow(val, 3), 0),\n    x4: x.reduce((sum, val) => sum + Math.pow(val, 4), 0),\n    x5: x.reduce((sum, val) => sum + Math.pow(val, 5), 0),\n    x6: x.reduce((sum, val) => sum + Math.pow(val, 6), 0),\n    y: y.reduce((sum, val) => sum + val, 0),\n    xy: x.reduce((sum, val, i) => sum + val * y[i], 0),\n    x2y: x.reduce((sum, val, i) => sum + Math.pow(val, 2) * y[i], 0),\n    x3y: x.reduce((sum, val, i) => sum + Math.pow(val, 3) * y[i], 0)\n  };\n  \n  // 构建系数矩阵\n  A.push([sums.x6, sums.x5, sums.x4, sums.x3]);\n  A.push([sums.x5, sums.x4, sums.x3, sums.x2]);\n  A.push([sums.x4, sums.x3, sums.x2, sums.x1]);\n  A.push([sums.x3, sums.x2, sums.x1, sums.x0]);\n  \n  B.push(sums.x3y);\n  B.push(sums.x2y);\n  B.push(sums.xy);\n  B.push(sums.y);\n  \n  // 高斯消元法求解\n  const coeffs = gaussianElimination(A, B);\n  \n  if (!coeffs) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（矩阵奇异）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const [a, b, c, d] = coeffs;\n  const predictedValues = x.map(val => a * Math.pow(val, 3) + b * Math.pow(val, 2) + c * val + d);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'polynomial',\n    formula: `y = ${a.toFixed(6)}x³ + ${b.toFixed(6)}x² + ${c.toFixed(6)}x + ${d.toFixed(6)}`,\n    coefficients: [a, b, c, d],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 幂函数拟合: y = a * x^b\nexport const powerFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉x <= 0或y <= 0的点\n  const validIndices = x.map((val, i) => val > 0 && y[i] > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'power',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnXLnY = validX.reduce((sum, val, i) => sum + Math.log(val) * Math.log(validY[i]), 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  \n  const b = (validN * sumLnXLnY - sumLnX * sumLnY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const lnA = (sumLnY - b * sumLnX) / validN;\n  const a = Math.exp(lnA);\n  \n  const predictedValues = x.map(val => val > 0 ? a * Math.pow(val, b) : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'power',\n    formula: `y = ${a.toFixed(6)} * x^${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 二元多项式拟合: y = a*x² + b*x + c\nexport const bivariateFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  if (n < 3) {\n    return {\n      type: 'bivariate',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  // 构建矩阵方程 A * coeffs = B\n  const A: number[][] = [];\n  const B: number[] = [];\n  \n  // 计算各项和\n  const sums = {\n    x0: n,\n    x1: x.reduce((sum, val) => sum + val, 0),\n    x2: x.reduce((sum, val) => sum + Math.pow(val, 2), 0),\n    x3: x.reduce((sum, val) => sum + Math.pow(val, 3), 0),\n    x4: x.reduce((sum, val) => sum + Math.pow(val, 4), 0),\n    y: y.reduce((sum, val) => sum + val, 0),\n    xy: x.reduce((sum, val, i) => sum + val * y[i], 0),\n    x2y: x.reduce((sum, val, i) => sum + Math.pow(val, 2) * y[i], 0)\n  };\n  \n  // 构建系数矩阵 (二次多项式)\n  A.push([sums.x4, sums.x3, sums.x2]);\n  A.push([sums.x3, sums.x2, sums.x1]);\n  A.push([sums.x2, sums.x1, sums.x0]);\n  \n  B.push(sums.x2y);\n  B.push(sums.xy);\n  B.push(sums.y);\n  \n  // 高斯消元法求解\n  const coeffs = gaussianElimination(A, B);\n  \n  if (!coeffs) {\n    return {\n      type: 'bivariate',\n      formula: '无法拟合（矩阵奇异）',\n      coefficients: [0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const [a, b, c] = coeffs;\n  const predictedValues = x.map(val => a * Math.pow(val, 2) + b * val + c);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'bivariate',\n    formula: `y = ${a.toFixed(6)}x² + ${b.toFixed(6)}x + ${c.toFixed(6)}`,\n    coefficients: [a, b, c],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 高斯消元法求解线性方程组\nconst gaussianElimination = (A: number[][], B: number[]): number[] | null => {\n  const n = A.length;\n  const augmented = A.map((row, i) => [...row, B[i]]);\n  \n  // 前向消元\n  for (let i = 0; i < n; i++) {\n    // 寻找主元\n    let maxRow = i;\n    for (let k = i + 1; k < n; k++) {\n      if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n        maxRow = k;\n      }\n    }\n    \n    // 交换行\n    [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n    \n    // 检查是否为奇异矩阵\n    if (Math.abs(augmented[i][i]) < 1e-10) {\n      return null;\n    }\n    \n    // 消元\n    for (let k = i + 1; k < n; k++) {\n      const factor = augmented[k][i] / augmented[i][i];\n      for (let j = i; j <= n; j++) {\n        augmented[k][j] -= factor * augmented[i][j];\n      }\n    }\n  }\n  \n  // 回代\n  const solution = new Array(n).fill(0);\n  for (let i = n - 1; i >= 0; i--) {\n    solution[i] = augmented[i][n];\n    for (let j = i + 1; j < n; j++) {\n      solution[i] -= augmented[i][j] * solution[j];\n    }\n    solution[i] /= augmented[i][i];\n  }\n  \n  return solution;\n};\n\n// 执行所有拟合算法\nexport const performAllFittings = (data: FittingData): FittingResult[] => {\n  return [\n    logarithmicFitting(data),\n    exponentialFitting(data),\n    polynomialFitting(data),\n    powerFitting(data),\n    bivariateFitting(data)\n  ];\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}