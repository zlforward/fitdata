{"ast":null,"code":"// 曲线拟合工具类\n\n// 计算R²决定系数\nconst calculateRSquared = (actual, predicted) => {\n  const actualMean = actual.reduce((sum, val) => sum + val, 0) / actual.length;\n  const totalSumSquares = actual.reduce((sum, val) => sum + Math.pow(val - actualMean, 2), 0);\n  const residualSumSquares = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  return 1 - residualSumSquares / totalSumSquares;\n};\n\n// 计算均方根误差 (RMSE)\nconst calculateRMSE = (actual, predicted) => {\n  const sumSquaredErrors = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  return Math.sqrt(sumSquaredErrors / actual.length);\n};\n\n// 计算平均绝对误差 (MAE)\nconst calculateMAE = (actual, predicted) => {\n  const sumAbsoluteErrors = actual.reduce((sum, val, i) => sum + Math.abs(val - predicted[i]), 0);\n  return sumAbsoluteErrors / actual.length;\n};\n\n// 计算最大误差\nconst calculateMaxError = (actual, predicted) => {\n  return Math.max(...actual.map((val, i) => Math.abs(val - predicted[i])));\n};\n\n// 对数拟合: y = a * ln(x) + b\nexport const logarithmicFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n\n  // 过滤掉x <= 0的点\n  const validIndices = x.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  if (validN < 2) {\n    return {\n      type: 'logarithmic',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumY = validY.reduce((sum, val) => sum + val, 0);\n  const sumLnXY = validX.reduce((sum, val, i) => sum + Math.log(val) * validY[i], 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  const a = (validN * sumLnXY - sumLnX * sumY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const b = (sumY - a * sumLnX) / validN;\n  const predictedValues = x.map(val => val > 0 ? a * Math.log(val) + b : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  return {\n    type: 'logarithmic',\n    formula: `y = ${a.toFixed(6)} * ln(x) + ${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 指数拟合: y = a * e^(b*x)\nexport const exponentialFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n\n  // 过滤掉y <= 0的点\n  const validIndices = y.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  if (validN < 2) {\n    return {\n      type: 'exponential',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  const sumX = validX.reduce((sum, val) => sum + val, 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumXLnY = validX.reduce((sum, val, i) => sum + val * Math.log(validY[i]), 0);\n  const sumX2 = validX.reduce((sum, val) => sum + Math.pow(val, 2), 0);\n  const b = (validN * sumXLnY - sumX * sumLnY) / (validN * sumX2 - Math.pow(sumX, 2));\n  const lnA = (sumLnY - b * sumX) / validN;\n  const a = Math.exp(lnA);\n  const predictedValues = x.map(val => a * Math.exp(b * val));\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  return {\n    type: 'exponential',\n    formula: `y = ${a.toFixed(6)} * e^(${b.toFixed(6)} * x)`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 三次多项式拟合: y = ax³ + bx² + cx + d\nexport const polynomialFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n  if (n < 4) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n\n  // 构建矩阵方程 A * coeffs = B\n  const A = [];\n  const B = [];\n\n  // 计算各项和\n  const sums = {\n    x0: n,\n    x1: x.reduce((sum, val) => sum + val, 0),\n    x2: x.reduce((sum, val) => sum + Math.pow(val, 2), 0),\n    x3: x.reduce((sum, val) => sum + Math.pow(val, 3), 0),\n    x4: x.reduce((sum, val) => sum + Math.pow(val, 4), 0),\n    x5: x.reduce((sum, val) => sum + Math.pow(val, 5), 0),\n    x6: x.reduce((sum, val) => sum + Math.pow(val, 6), 0),\n    y: y.reduce((sum, val) => sum + val, 0),\n    xy: x.reduce((sum, val, i) => sum + val * y[i], 0),\n    x2y: x.reduce((sum, val, i) => sum + Math.pow(val, 2) * y[i], 0),\n    x3y: x.reduce((sum, val, i) => sum + Math.pow(val, 3) * y[i], 0)\n  };\n\n  // 构建系数矩阵\n  A.push([sums.x6, sums.x5, sums.x4, sums.x3]);\n  A.push([sums.x5, sums.x4, sums.x3, sums.x2]);\n  A.push([sums.x4, sums.x3, sums.x2, sums.x1]);\n  A.push([sums.x3, sums.x2, sums.x1, sums.x0]);\n  B.push(sums.x3y);\n  B.push(sums.x2y);\n  B.push(sums.xy);\n  B.push(sums.y);\n\n  // 高斯消元法求解\n  const coeffs = gaussianElimination(A, B);\n  if (!coeffs) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（矩阵奇异）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  const [a, b, c, d] = coeffs;\n  const predictedValues = x.map(val => a * Math.pow(val, 3) + b * Math.pow(val, 2) + c * val + d);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  return {\n    type: 'polynomial',\n    formula: `y = ${a.toFixed(6)}x³ + ${b.toFixed(6)}x² + ${c.toFixed(6)}x + ${d.toFixed(6)}`,\n    coefficients: [a, b, c, d],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 幂函数拟合: y = a * x^b\nexport const powerFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n\n  // 过滤掉x <= 0或y <= 0的点\n  const validIndices = x.map((val, i) => val > 0 && y[i] > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  if (validN < 2) {\n    return {\n      type: 'power',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnXLnY = validX.reduce((sum, val, i) => sum + Math.log(val) * Math.log(validY[i]), 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  const b = (validN * sumLnXLnY - sumLnX * sumLnY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const lnA = (sumLnY - b * sumLnX) / validN;\n  const a = Math.exp(lnA);\n  const predictedValues = x.map(val => val > 0 ? a * Math.pow(val, b) : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  return {\n    type: 'power',\n    formula: `y = ${a.toFixed(6)} * x^${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 高斯消元法求解线性方程组\nconst gaussianElimination = (A, B) => {\n  const n = A.length;\n  const augmented = A.map((row, i) => [...row, B[i]]);\n\n  // 前向消元\n  for (let i = 0; i < n; i++) {\n    // 寻找主元\n    let maxRow = i;\n    for (let k = i + 1; k < n; k++) {\n      if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n        maxRow = k;\n      }\n    }\n\n    // 交换行\n    [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n\n    // 检查是否为奇异矩阵\n    if (Math.abs(augmented[i][i]) < 1e-10) {\n      return null;\n    }\n\n    // 消元\n    for (let k = i + 1; k < n; k++) {\n      const factor = augmented[k][i] / augmented[i][i];\n      for (let j = i; j <= n; j++) {\n        augmented[k][j] -= factor * augmented[i][j];\n      }\n    }\n  }\n\n  // 回代\n  const solution = new Array(n).fill(0);\n  for (let i = n - 1; i >= 0; i--) {\n    solution[i] = augmented[i][n];\n    for (let j = i + 1; j < n; j++) {\n      solution[i] -= augmented[i][j] * solution[j];\n    }\n    solution[i] /= augmented[i][i];\n  }\n  return solution;\n};\n\n// 执行所有拟合算法\nexport const performAllFittings = data => {\n  return [logarithmicFitting(data), exponentialFitting(data), polynomialFitting(data), powerFitting(data)];\n};","map":{"version":3,"names":["calculateRSquared","actual","predicted","actualMean","reduce","sum","val","length","totalSumSquares","Math","pow","residualSumSquares","i","calculateRMSE","sumSquaredErrors","sqrt","calculateMAE","sumAbsoluteErrors","abs","calculateMaxError","max","map","logarithmicFitting","data","x","y","n","validIndices","filter","validX","validY","validN","type","formula","coefficients","rSquared","predictedValues","Array","fill","rmse","mae","maxError","sumLnX","log","sumY","sumLnXY","sumLnX2","a","b","toFixed","exponentialFitting","sumX","sumLnY","sumXLnY","sumX2","lnA","exp","polynomialFitting","A","B","sums","x0","x1","x2","x3","x4","x5","x6","xy","x2y","x3y","push","coeffs","gaussianElimination","c","d","powerFitting","sumLnXLnY","augmented","row","maxRow","k","factor","j","solution","performAllFittings"],"sources":["D:/source/fitdata/fitdata-visualizer/src/utils/curveFitting.ts"],"sourcesContent":["// 曲线拟合工具类\n\nexport interface FittingResult {\n  type: 'logarithmic' | 'exponential' | 'polynomial' | 'power';\n  formula: string;\n  coefficients: number[];\n  rSquared: number;\n  predictedValues: number[];\n  rmse: number; // 均方根误差\n  mae: number;  // 平均绝对误差\n  maxError: number; // 最大误差\n}\n\nexport interface FittingData {\n  x: number[]; // 中心像素值\n  y: number[]; // 灰阶值\n}\n\n// 计算R²决定系数\nconst calculateRSquared = (actual: number[], predicted: number[]): number => {\n  const actualMean = actual.reduce((sum, val) => sum + val, 0) / actual.length;\n  const totalSumSquares = actual.reduce((sum, val) => sum + Math.pow(val - actualMean, 2), 0);\n  const residualSumSquares = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  \n  return 1 - (residualSumSquares / totalSumSquares);\n};\n\n// 计算均方根误差 (RMSE)\nconst calculateRMSE = (actual: number[], predicted: number[]): number => {\n  const sumSquaredErrors = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  return Math.sqrt(sumSquaredErrors / actual.length);\n};\n\n// 计算平均绝对误差 (MAE)\nconst calculateMAE = (actual: number[], predicted: number[]): number => {\n  const sumAbsoluteErrors = actual.reduce((sum, val, i) => sum + Math.abs(val - predicted[i]), 0);\n  return sumAbsoluteErrors / actual.length;\n};\n\n// 计算最大误差\nconst calculateMaxError = (actual: number[], predicted: number[]): number => {\n  return Math.max(...actual.map((val, i) => Math.abs(val - predicted[i])));\n};\n\n// 对数拟合: y = a * ln(x) + b\nexport const logarithmicFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉x <= 0的点\n  const validIndices = x.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'logarithmic',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumY = validY.reduce((sum, val) => sum + val, 0);\n  const sumLnXY = validX.reduce((sum, val, i) => sum + Math.log(val) * validY[i], 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  \n  const a = (validN * sumLnXY - sumLnX * sumY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const b = (sumY - a * sumLnX) / validN;\n  \n  const predictedValues = x.map(val => val > 0 ? a * Math.log(val) + b : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'logarithmic',\n    formula: `y = ${a.toFixed(6)} * ln(x) + ${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 指数拟合: y = a * e^(b*x)\nexport const exponentialFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉y <= 0的点\n  const validIndices = y.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'exponential',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const sumX = validX.reduce((sum, val) => sum + val, 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumXLnY = validX.reduce((sum, val, i) => sum + val * Math.log(validY[i]), 0);\n  const sumX2 = validX.reduce((sum, val) => sum + Math.pow(val, 2), 0);\n  \n  const b = (validN * sumXLnY - sumX * sumLnY) / (validN * sumX2 - Math.pow(sumX, 2));\n  const lnA = (sumLnY - b * sumX) / validN;\n  const a = Math.exp(lnA);\n  \n  const predictedValues = x.map(val => a * Math.exp(b * val));\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'exponential',\n    formula: `y = ${a.toFixed(6)} * e^(${b.toFixed(6)} * x)`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 三次多项式拟合: y = ax³ + bx² + cx + d\nexport const polynomialFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  if (n < 4) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  // 构建矩阵方程 A * coeffs = B\n  const A: number[][] = [];\n  const B: number[] = [];\n  \n  // 计算各项和\n  const sums = {\n    x0: n,\n    x1: x.reduce((sum, val) => sum + val, 0),\n    x2: x.reduce((sum, val) => sum + Math.pow(val, 2), 0),\n    x3: x.reduce((sum, val) => sum + Math.pow(val, 3), 0),\n    x4: x.reduce((sum, val) => sum + Math.pow(val, 4), 0),\n    x5: x.reduce((sum, val) => sum + Math.pow(val, 5), 0),\n    x6: x.reduce((sum, val) => sum + Math.pow(val, 6), 0),\n    y: y.reduce((sum, val) => sum + val, 0),\n    xy: x.reduce((sum, val, i) => sum + val * y[i], 0),\n    x2y: x.reduce((sum, val, i) => sum + Math.pow(val, 2) * y[i], 0),\n    x3y: x.reduce((sum, val, i) => sum + Math.pow(val, 3) * y[i], 0)\n  };\n  \n  // 构建系数矩阵\n  A.push([sums.x6, sums.x5, sums.x4, sums.x3]);\n  A.push([sums.x5, sums.x4, sums.x3, sums.x2]);\n  A.push([sums.x4, sums.x3, sums.x2, sums.x1]);\n  A.push([sums.x3, sums.x2, sums.x1, sums.x0]);\n  \n  B.push(sums.x3y);\n  B.push(sums.x2y);\n  B.push(sums.xy);\n  B.push(sums.y);\n  \n  // 高斯消元法求解\n  const coeffs = gaussianElimination(A, B);\n  \n  if (!coeffs) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（矩阵奇异）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const [a, b, c, d] = coeffs;\n  const predictedValues = x.map(val => a * Math.pow(val, 3) + b * Math.pow(val, 2) + c * val + d);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'polynomial',\n    formula: `y = ${a.toFixed(6)}x³ + ${b.toFixed(6)}x² + ${c.toFixed(6)}x + ${d.toFixed(6)}`,\n    coefficients: [a, b, c, d],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 幂函数拟合: y = a * x^b\nexport const powerFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉x <= 0或y <= 0的点\n  const validIndices = x.map((val, i) => val > 0 && y[i] > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'power',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0),\n      rmse: 0,\n      mae: 0,\n      maxError: 0\n    };\n  }\n  \n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnXLnY = validX.reduce((sum, val, i) => sum + Math.log(val) * Math.log(validY[i]), 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  \n  const b = (validN * sumLnXLnY - sumLnX * sumLnY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const lnA = (sumLnY - b * sumLnX) / validN;\n  const a = Math.exp(lnA);\n  \n  const predictedValues = x.map(val => val > 0 ? a * Math.pow(val, b) : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  const rmse = calculateRMSE(y, predictedValues);\n  const mae = calculateMAE(y, predictedValues);\n  const maxError = calculateMaxError(y, predictedValues);\n  \n  return {\n    type: 'power',\n    formula: `y = ${a.toFixed(6)} * x^${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues,\n    rmse,\n    mae,\n    maxError\n  };\n};\n\n// 高斯消元法求解线性方程组\nconst gaussianElimination = (A: number[][], B: number[]): number[] | null => {\n  const n = A.length;\n  const augmented = A.map((row, i) => [...row, B[i]]);\n  \n  // 前向消元\n  for (let i = 0; i < n; i++) {\n    // 寻找主元\n    let maxRow = i;\n    for (let k = i + 1; k < n; k++) {\n      if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n        maxRow = k;\n      }\n    }\n    \n    // 交换行\n    [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n    \n    // 检查是否为奇异矩阵\n    if (Math.abs(augmented[i][i]) < 1e-10) {\n      return null;\n    }\n    \n    // 消元\n    for (let k = i + 1; k < n; k++) {\n      const factor = augmented[k][i] / augmented[i][i];\n      for (let j = i; j <= n; j++) {\n        augmented[k][j] -= factor * augmented[i][j];\n      }\n    }\n  }\n  \n  // 回代\n  const solution = new Array(n).fill(0);\n  for (let i = n - 1; i >= 0; i--) {\n    solution[i] = augmented[i][n];\n    for (let j = i + 1; j < n; j++) {\n      solution[i] -= augmented[i][j] * solution[j];\n    }\n    solution[i] /= augmented[i][i];\n  }\n  \n  return solution;\n};\n\n// 执行所有拟合算法\nexport const performAllFittings = (data: FittingData): FittingResult[] => {\n  return [\n    logarithmicFitting(data),\n    exponentialFitting(data),\n    polynomialFitting(data),\n    powerFitting(data)\n  ];\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}