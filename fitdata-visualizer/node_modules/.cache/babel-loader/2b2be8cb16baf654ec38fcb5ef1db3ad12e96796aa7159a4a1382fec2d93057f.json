{"ast":null,"code":"import * as XLSX from 'xlsx';\n// 将列索引转换为Excel列名 (0->A, 1->B, etc.)\nconst getColumnName = index => {\n  let result = '';\n  while (index >= 0) {\n    result = String.fromCharCode(65 + index % 26) + result;\n    index = Math.floor(index / 26) - 1;\n  }\n  return result;\n};\n\n// 解析灰阶数据：从B1开始，每隔22个单元格获取下一个值\nexport const parseGrayScaleData = worksheet => {\n  const values = [];\n  const positions = [];\n  let currentRow = 1; // 从第1行开始\n  const column = 'B'; // B列\n\n  while (true) {\n    const cellAddress = `${column}${currentRow}`;\n    const cell = worksheet[cellAddress];\n\n    // 如果单元格为空或不存在，停止解析\n    if (!cell || cell.v === undefined || cell.v === null || cell.v === '') {\n      break;\n    }\n    const value = typeof cell.v === 'number' ? cell.v : parseFloat(cell.v.toString());\n    if (!isNaN(value)) {\n      values.push(value);\n      positions.push(cellAddress);\n    }\n    currentRow += 22; // 每隔22个单元格\n  }\n  return {\n    values,\n    positions\n  };\n};\n\n// 解析亮度数据块：按照规律生成所有数据块，每隔22行一个32x20的矩阵\nexport const parseBrightnessBlocks = worksheet => {\n  const blocks = [];\n  let blockIndex = 1;\n  let currentStartRow = 2; // 从第2行开始\n\n  // 持续解析直到找不到有效数据\n  while (true) {\n    const currentEndRow = currentStartRow + 19; // 每个块20行数据\n    const data = [];\n    let hasValidData = false;\n\n    // 解析32列 (A到AF) x 20行的数据\n    for (let row = currentStartRow; row <= currentEndRow; row++) {\n      const rowData = [];\n\n      // 从A列(0)到AF列(31)，共32列\n      for (let col = 0; col < 32; col++) {\n        const columnName = getColumnName(col);\n        const cellAddress = `${columnName}${row}`;\n        const cell = worksheet[cellAddress];\n        let value = 0;\n        if (cell && cell.v !== undefined && cell.v !== null && cell.v !== '') {\n          const parsedValue = typeof cell.v === 'number' ? cell.v : parseFloat(cell.v.toString());\n          if (!isNaN(parsedValue)) {\n            value = parsedValue;\n            hasValidData = true;\n          }\n        }\n        rowData.push(value);\n      }\n      data.push(rowData);\n    }\n\n    // 如果这个块没有任何有效数据，停止解析\n    if (!hasValidData) {\n      break;\n    }\n    blocks.push({\n      data,\n      startRow: currentStartRow,\n      endRow: currentEndRow,\n      label: `数据块 ${blockIndex} (A${currentStartRow}-AF${currentEndRow})`\n    });\n    blockIndex++;\n    currentStartRow += 22; // 每隔22行开始下一个数据块\n  }\n  return blocks;\n};\n\n// 主解析函数\nexport const parseExcelData = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        var _e$target;\n        const data = new Uint8Array((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n\n        // 获取第一个工作表\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n\n        // 解析数据\n        const grayScale = parseGrayScaleData(worksheet);\n        const brightnessBlocks = parseBrightnessBlocks(worksheet);\n        resolve({\n          grayScale,\n          brightnessBlocks\n        });\n      } catch (error) {\n        reject(error);\n      }\n    };\n    reader.onerror = () => {\n      reject(new Error('文件读取失败'));\n    };\n    reader.readAsArrayBuffer(file);\n  });\n};","map":{"version":3,"names":["XLSX","getColumnName","index","result","String","fromCharCode","Math","floor","parseGrayScaleData","worksheet","values","positions","currentRow","column","cellAddress","cell","v","undefined","value","parseFloat","toString","isNaN","push","parseBrightnessBlocks","blocks","blockIndex","currentStartRow","currentEndRow","data","hasValidData","row","rowData","col","columnName","parsedValue","startRow","endRow","label","parseExcelData","file","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","Uint8Array","target","workbook","read","type","sheetName","SheetNames","Sheets","grayScale","brightnessBlocks","error","onerror","Error","readAsArrayBuffer"],"sources":["D:/source/fitdata/fitdata-visualizer/src/utils/dataParser.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\n\nexport interface GrayScaleData {\n  values: number[];\n  positions: string[];\n}\n\nexport interface BrightnessBlock {\n  data: number[][];\n  startRow: number;\n  endRow: number;\n  label: string;\n}\n\nexport interface ParsedData {\n  grayScale: GrayScaleData;\n  brightnessBlocks: BrightnessBlock[];\n}\n\n// 将列索引转换为Excel列名 (0->A, 1->B, etc.)\nconst getColumnName = (index: number): string => {\n  let result = '';\n  while (index >= 0) {\n    result = String.fromCharCode(65 + (index % 26)) + result;\n    index = Math.floor(index / 26) - 1;\n  }\n  return result;\n};\n\n// 解析灰阶数据：从B1开始，每隔22个单元格获取下一个值\nexport const parseGrayScaleData = (worksheet: XLSX.WorkSheet): GrayScaleData => {\n  const values: number[] = [];\n  const positions: string[] = [];\n  \n  let currentRow = 1; // 从第1行开始\n  const column = 'B'; // B列\n  \n  while (true) {\n    const cellAddress = `${column}${currentRow}`;\n    const cell = worksheet[cellAddress];\n    \n    // 如果单元格为空或不存在，停止解析\n    if (!cell || cell.v === undefined || cell.v === null || cell.v === '') {\n      break;\n    }\n    \n    const value = typeof cell.v === 'number' ? cell.v : parseFloat(cell.v.toString());\n    if (!isNaN(value)) {\n      values.push(value);\n      positions.push(cellAddress);\n    }\n    \n    currentRow += 22; // 每隔22个单元格\n  }\n  \n  return { values, positions };\n};\n\n// 解析亮度数据块：按照规律生成所有数据块，每隔22行一个32x20的矩阵\nexport const parseBrightnessBlocks = (worksheet: XLSX.WorkSheet): BrightnessBlock[] => {\n  const blocks: BrightnessBlock[] = [];\n  \n  let blockIndex = 1;\n  let currentStartRow = 2; // 从第2行开始\n  \n  // 持续解析直到找不到有效数据\n  while (true) {\n    const currentEndRow = currentStartRow + 19; // 每个块20行数据\n    const data: number[][] = [];\n    let hasValidData = false;\n    \n    // 解析32列 (A到AF) x 20行的数据\n    for (let row = currentStartRow; row <= currentEndRow; row++) {\n      const rowData: number[] = [];\n      \n      // 从A列(0)到AF列(31)，共32列\n      for (let col = 0; col < 32; col++) {\n        const columnName = getColumnName(col);\n        const cellAddress = `${columnName}${row}`;\n        const cell = worksheet[cellAddress];\n        \n        let value = 0;\n        if (cell && cell.v !== undefined && cell.v !== null && cell.v !== '') {\n          const parsedValue = typeof cell.v === 'number' ? cell.v : parseFloat(cell.v.toString());\n          if (!isNaN(parsedValue)) {\n            value = parsedValue;\n            hasValidData = true;\n          }\n        }\n        \n        rowData.push(value);\n      }\n      \n      data.push(rowData);\n    }\n    \n    // 如果这个块没有任何有效数据，停止解析\n    if (!hasValidData) {\n      break;\n    }\n    \n    blocks.push({\n      data,\n      startRow: currentStartRow,\n      endRow: currentEndRow,\n      label: `数据块 ${blockIndex} (A${currentStartRow}-AF${currentEndRow})`\n    });\n    \n    blockIndex++;\n    currentStartRow += 22; // 每隔22行开始下一个数据块\n  }\n  \n  return blocks;\n};\n\n// 主解析函数\nexport const parseExcelData = (file: File): Promise<ParsedData> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target?.result as ArrayBuffer);\n        const workbook = XLSX.read(data, { type: 'array' });\n        \n        // 获取第一个工作表\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        \n        // 解析数据\n        const grayScale = parseGrayScaleData(worksheet);\n        const brightnessBlocks = parseBrightnessBlocks(worksheet);\n        \n        resolve({\n          grayScale,\n          brightnessBlocks\n        });\n      } catch (error) {\n        reject(error);\n      }\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('文件读取失败'));\n    };\n    \n    reader.readAsArrayBuffer(file);\n  });\n};"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAmB5B;AACA,MAAMC,aAAa,GAAIC,KAAa,IAAa;EAC/C,IAAIC,MAAM,GAAG,EAAE;EACf,OAAOD,KAAK,IAAI,CAAC,EAAE;IACjBC,MAAM,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAIH,KAAK,GAAG,EAAG,CAAC,GAAGC,MAAM;IACxDD,KAAK,GAAGI,IAAI,CAACC,KAAK,CAACL,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC;EACpC;EACA,OAAOC,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMK,kBAAkB,GAAIC,SAAyB,IAAoB;EAC9E,MAAMC,MAAgB,GAAG,EAAE;EAC3B,MAAMC,SAAmB,GAAG,EAAE;EAE9B,IAAIC,UAAU,GAAG,CAAC,CAAC,CAAC;EACpB,MAAMC,MAAM,GAAG,GAAG,CAAC,CAAC;;EAEpB,OAAO,IAAI,EAAE;IACX,MAAMC,WAAW,GAAG,GAAGD,MAAM,GAAGD,UAAU,EAAE;IAC5C,MAAMG,IAAI,GAAGN,SAAS,CAACK,WAAW,CAAC;;IAEnC;IACA,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,CAAC,KAAKC,SAAS,IAAIF,IAAI,CAACC,CAAC,KAAK,IAAI,IAAID,IAAI,CAACC,CAAC,KAAK,EAAE,EAAE;MACrE;IACF;IAEA,MAAME,KAAK,GAAG,OAAOH,IAAI,CAACC,CAAC,KAAK,QAAQ,GAAGD,IAAI,CAACC,CAAC,GAAGG,UAAU,CAACJ,IAAI,CAACC,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC;IACjF,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,EAAE;MACjBR,MAAM,CAACY,IAAI,CAACJ,KAAK,CAAC;MAClBP,SAAS,CAACW,IAAI,CAACR,WAAW,CAAC;IAC7B;IAEAF,UAAU,IAAI,EAAE,CAAC,CAAC;EACpB;EAEA,OAAO;IAAEF,MAAM;IAAEC;EAAU,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMY,qBAAqB,GAAId,SAAyB,IAAwB;EACrF,MAAMe,MAAyB,GAAG,EAAE;EAEpC,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,eAAe,GAAG,CAAC,CAAC,CAAC;;EAEzB;EACA,OAAO,IAAI,EAAE;IACX,MAAMC,aAAa,GAAGD,eAAe,GAAG,EAAE,CAAC,CAAC;IAC5C,MAAME,IAAgB,GAAG,EAAE;IAC3B,IAAIC,YAAY,GAAG,KAAK;;IAExB;IACA,KAAK,IAAIC,GAAG,GAAGJ,eAAe,EAAEI,GAAG,IAAIH,aAAa,EAAEG,GAAG,EAAE,EAAE;MAC3D,MAAMC,OAAiB,GAAG,EAAE;;MAE5B;MACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;QACjC,MAAMC,UAAU,GAAGhC,aAAa,CAAC+B,GAAG,CAAC;QACrC,MAAMlB,WAAW,GAAG,GAAGmB,UAAU,GAAGH,GAAG,EAAE;QACzC,MAAMf,IAAI,GAAGN,SAAS,CAACK,WAAW,CAAC;QAEnC,IAAII,KAAK,GAAG,CAAC;QACb,IAAIH,IAAI,IAAIA,IAAI,CAACC,CAAC,KAAKC,SAAS,IAAIF,IAAI,CAACC,CAAC,KAAK,IAAI,IAAID,IAAI,CAACC,CAAC,KAAK,EAAE,EAAE;UACpE,MAAMkB,WAAW,GAAG,OAAOnB,IAAI,CAACC,CAAC,KAAK,QAAQ,GAAGD,IAAI,CAACC,CAAC,GAAGG,UAAU,CAACJ,IAAI,CAACC,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC;UACvF,IAAI,CAACC,KAAK,CAACa,WAAW,CAAC,EAAE;YACvBhB,KAAK,GAAGgB,WAAW;YACnBL,YAAY,GAAG,IAAI;UACrB;QACF;QAEAE,OAAO,CAACT,IAAI,CAACJ,KAAK,CAAC;MACrB;MAEAU,IAAI,CAACN,IAAI,CAACS,OAAO,CAAC;IACpB;;IAEA;IACA,IAAI,CAACF,YAAY,EAAE;MACjB;IACF;IAEAL,MAAM,CAACF,IAAI,CAAC;MACVM,IAAI;MACJO,QAAQ,EAAET,eAAe;MACzBU,MAAM,EAAET,aAAa;MACrBU,KAAK,EAAE,OAAOZ,UAAU,MAAMC,eAAe,MAAMC,aAAa;IAClE,CAAC,CAAC;IAEFF,UAAU,EAAE;IACZC,eAAe,IAAI,EAAE,CAAC,CAAC;EACzB;EAEA,OAAOF,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMc,cAAc,GAAIC,IAAU,IAA0B;EACjE,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB,IAAI;QAAA,IAAAC,SAAA;QACF,MAAMnB,IAAI,GAAG,IAAIoB,UAAU,EAAAD,SAAA,GAACD,CAAC,CAACG,MAAM,cAAAF,SAAA,uBAARA,SAAA,CAAU5C,MAAqB,CAAC;QAC5D,MAAM+C,QAAQ,GAAGlD,IAAI,CAACmD,IAAI,CAACvB,IAAI,EAAE;UAAEwB,IAAI,EAAE;QAAQ,CAAC,CAAC;;QAEnD;QACA,MAAMC,SAAS,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;QACxC,MAAM7C,SAAS,GAAGyC,QAAQ,CAACK,MAAM,CAACF,SAAS,CAAC;;QAE5C;QACA,MAAMG,SAAS,GAAGhD,kBAAkB,CAACC,SAAS,CAAC;QAC/C,MAAMgD,gBAAgB,GAAGlC,qBAAqB,CAACd,SAAS,CAAC;QAEzDgC,OAAO,CAAC;UACNe,SAAS;UACTC;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhB,MAAM,CAACgB,KAAK,CAAC;MACf;IACF,CAAC;IAEDf,MAAM,CAACgB,OAAO,GAAG,MAAM;MACrBjB,MAAM,CAAC,IAAIkB,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAEDjB,MAAM,CAACkB,iBAAiB,CAACtB,IAAI,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}