{"ast":null,"code":"// 曲线拟合工具类\n\n// 计算R²决定系数\nconst calculateRSquared = (actual, predicted) => {\n  const actualMean = actual.reduce((sum, val) => sum + val, 0) / actual.length;\n  const totalSumSquares = actual.reduce((sum, val) => sum + Math.pow(val - actualMean, 2), 0);\n  const residualSumSquares = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  return 1 - residualSumSquares / totalSumSquares;\n};\n\n// 对数拟合: y = a * ln(x) + b\nexport const logarithmicFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n\n  // 过滤掉x <= 0的点\n  const validIndices = x.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  if (validN < 2) {\n    return {\n      type: 'logarithmic',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumY = validY.reduce((sum, val) => sum + val, 0);\n  const sumLnXY = validX.reduce((sum, val, i) => sum + Math.log(val) * validY[i], 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  const a = (validN * sumLnXY - sumLnX * sumY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const b = (sumY - a * sumLnX) / validN;\n  const predictedValues = x.map(val => val > 0 ? a * Math.log(val) + b : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  return {\n    type: 'logarithmic',\n    formula: `y = ${a.toFixed(6)} * ln(x) + ${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 指数拟合: y = a * e^(b*x)\nexport const exponentialFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n\n  // 过滤掉y <= 0的点\n  const validIndices = y.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  if (validN < 2) {\n    return {\n      type: 'exponential',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  const sumX = validX.reduce((sum, val) => sum + val, 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumXLnY = validX.reduce((sum, val, i) => sum + val * Math.log(validY[i]), 0);\n  const sumX2 = validX.reduce((sum, val) => sum + Math.pow(val, 2), 0);\n  const b = (validN * sumXLnY - sumX * sumLnY) / (validN * sumX2 - Math.pow(sumX, 2));\n  const lnA = (sumLnY - b * sumX) / validN;\n  const a = Math.exp(lnA);\n  const predictedValues = x.map(val => a * Math.exp(b * val));\n  const rSquared = calculateRSquared(y, predictedValues);\n  return {\n    type: 'exponential',\n    formula: `y = ${a.toFixed(6)} * e^(${b.toFixed(6)} * x)`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 三次多项式拟合: y = ax³ + bx² + cx + d\nexport const polynomialFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n  if (n < 4) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n\n  // 构建矩阵方程 A * coeffs = B\n  const A = [];\n  const B = [];\n\n  // 计算各项和\n  const sums = {\n    x0: n,\n    x1: x.reduce((sum, val) => sum + val, 0),\n    x2: x.reduce((sum, val) => sum + Math.pow(val, 2), 0),\n    x3: x.reduce((sum, val) => sum + Math.pow(val, 3), 0),\n    x4: x.reduce((sum, val) => sum + Math.pow(val, 4), 0),\n    x5: x.reduce((sum, val) => sum + Math.pow(val, 5), 0),\n    x6: x.reduce((sum, val) => sum + Math.pow(val, 6), 0),\n    y: y.reduce((sum, val) => sum + val, 0),\n    xy: x.reduce((sum, val, i) => sum + val * y[i], 0),\n    x2y: x.reduce((sum, val, i) => sum + Math.pow(val, 2) * y[i], 0),\n    x3y: x.reduce((sum, val, i) => sum + Math.pow(val, 3) * y[i], 0)\n  };\n\n  // 构建系数矩阵\n  A.push([sums.x6, sums.x5, sums.x4, sums.x3]);\n  A.push([sums.x5, sums.x4, sums.x3, sums.x2]);\n  A.push([sums.x4, sums.x3, sums.x2, sums.x1]);\n  A.push([sums.x3, sums.x2, sums.x1, sums.x0]);\n  B.push(sums.x3y);\n  B.push(sums.x2y);\n  B.push(sums.xy);\n  B.push(sums.y);\n\n  // 高斯消元法求解\n  const coeffs = gaussianElimination(A, B);\n  if (!coeffs) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（矩阵奇异）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  const [a, b, c, d] = coeffs;\n  const predictedValues = x.map(val => a * Math.pow(val, 3) + b * Math.pow(val, 2) + c * val + d);\n  const rSquared = calculateRSquared(y, predictedValues);\n  return {\n    type: 'polynomial',\n    formula: `y = ${a.toFixed(6)}x³ + ${b.toFixed(6)}x² + ${c.toFixed(6)}x + ${d.toFixed(6)}`,\n    coefficients: [a, b, c, d],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 幂函数拟合: y = a * x^b\nexport const powerFitting = data => {\n  const {\n    x,\n    y\n  } = data;\n  const n = x.length;\n\n  // 过滤掉x <= 0或y <= 0的点\n  const validIndices = x.map((val, i) => val > 0 && y[i] > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  if (validN < 2) {\n    return {\n      type: 'power',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnXLnY = validX.reduce((sum, val, i) => sum + Math.log(val) * Math.log(validY[i]), 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  const b = (validN * sumLnXLnY - sumLnX * sumLnY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const lnA = (sumLnY - b * sumLnX) / validN;\n  const a = Math.exp(lnA);\n  const predictedValues = x.map(val => val > 0 ? a * Math.pow(val, b) : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  return {\n    type: 'power',\n    formula: `y = ${a.toFixed(6)} * x^${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 高斯消元法求解线性方程组\nconst gaussianElimination = (A, B) => {\n  const n = A.length;\n  const augmented = A.map((row, i) => [...row, B[i]]);\n\n  // 前向消元\n  for (let i = 0; i < n; i++) {\n    // 寻找主元\n    let maxRow = i;\n    for (let k = i + 1; k < n; k++) {\n      if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n        maxRow = k;\n      }\n    }\n\n    // 交换行\n    [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n\n    // 检查是否为奇异矩阵\n    if (Math.abs(augmented[i][i]) < 1e-10) {\n      return null;\n    }\n\n    // 消元\n    for (let k = i + 1; k < n; k++) {\n      const factor = augmented[k][i] / augmented[i][i];\n      for (let j = i; j <= n; j++) {\n        augmented[k][j] -= factor * augmented[i][j];\n      }\n    }\n  }\n\n  // 回代\n  const solution = new Array(n).fill(0);\n  for (let i = n - 1; i >= 0; i--) {\n    solution[i] = augmented[i][n];\n    for (let j = i + 1; j < n; j++) {\n      solution[i] -= augmented[i][j] * solution[j];\n    }\n    solution[i] /= augmented[i][i];\n  }\n  return solution;\n};\n\n// 执行所有拟合算法\nexport const performAllFittings = data => {\n  return [logarithmicFitting(data), exponentialFitting(data), polynomialFitting(data), powerFitting(data)];\n};","map":{"version":3,"names":["calculateRSquared","actual","predicted","actualMean","reduce","sum","val","length","totalSumSquares","Math","pow","residualSumSquares","i","logarithmicFitting","data","x","y","n","validIndices","map","filter","validX","validY","validN","type","formula","coefficients","rSquared","predictedValues","Array","fill","sumLnX","log","sumY","sumLnXY","sumLnX2","a","b","toFixed","exponentialFitting","sumX","sumLnY","sumXLnY","sumX2","lnA","exp","polynomialFitting","A","B","sums","x0","x1","x2","x3","x4","x5","x6","xy","x2y","x3y","push","coeffs","gaussianElimination","c","d","powerFitting","sumLnXLnY","augmented","row","maxRow","k","abs","factor","j","solution","performAllFittings"],"sources":["D:/source/fitdata/fitdata-visualizer/src/utils/curveFitting.ts"],"sourcesContent":["// 曲线拟合工具类\n\nexport interface FittingResult {\n  type: 'logarithmic' | 'exponential' | 'polynomial' | 'power';\n  formula: string;\n  coefficients: number[];\n  rSquared: number;\n  predictedValues: number[];\n}\n\nexport interface FittingData {\n  x: number[]; // 中心像素值\n  y: number[]; // 灰阶值\n}\n\n// 计算R²决定系数\nconst calculateRSquared = (actual: number[], predicted: number[]): number => {\n  const actualMean = actual.reduce((sum, val) => sum + val, 0) / actual.length;\n  const totalSumSquares = actual.reduce((sum, val) => sum + Math.pow(val - actualMean, 2), 0);\n  const residualSumSquares = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0);\n  \n  return 1 - (residualSumSquares / totalSumSquares);\n};\n\n// 对数拟合: y = a * ln(x) + b\nexport const logarithmicFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉x <= 0的点\n  const validIndices = x.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'logarithmic',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  \n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumY = validY.reduce((sum, val) => sum + val, 0);\n  const sumLnXY = validX.reduce((sum, val, i) => sum + Math.log(val) * validY[i], 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  \n  const a = (validN * sumLnXY - sumLnX * sumY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const b = (sumY - a * sumLnX) / validN;\n  \n  const predictedValues = x.map(val => val > 0 ? a * Math.log(val) + b : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  \n  return {\n    type: 'logarithmic',\n    formula: `y = ${a.toFixed(6)} * ln(x) + ${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 指数拟合: y = a * e^(b*x)\nexport const exponentialFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉y <= 0的点\n  const validIndices = y.map((val, i) => val > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'exponential',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  \n  const sumX = validX.reduce((sum, val) => sum + val, 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumXLnY = validX.reduce((sum, val, i) => sum + val * Math.log(validY[i]), 0);\n  const sumX2 = validX.reduce((sum, val) => sum + Math.pow(val, 2), 0);\n  \n  const b = (validN * sumXLnY - sumX * sumLnY) / (validN * sumX2 - Math.pow(sumX, 2));\n  const lnA = (sumLnY - b * sumX) / validN;\n  const a = Math.exp(lnA);\n  \n  const predictedValues = x.map(val => a * Math.exp(b * val));\n  const rSquared = calculateRSquared(y, predictedValues);\n  \n  return {\n    type: 'exponential',\n    formula: `y = ${a.toFixed(6)} * e^(${b.toFixed(6)} * x)`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 三次多项式拟合: y = ax³ + bx² + cx + d\nexport const polynomialFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  if (n < 4) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  \n  // 构建矩阵方程 A * coeffs = B\n  const A: number[][] = [];\n  const B: number[] = [];\n  \n  // 计算各项和\n  const sums = {\n    x0: n,\n    x1: x.reduce((sum, val) => sum + val, 0),\n    x2: x.reduce((sum, val) => sum + Math.pow(val, 2), 0),\n    x3: x.reduce((sum, val) => sum + Math.pow(val, 3), 0),\n    x4: x.reduce((sum, val) => sum + Math.pow(val, 4), 0),\n    x5: x.reduce((sum, val) => sum + Math.pow(val, 5), 0),\n    x6: x.reduce((sum, val) => sum + Math.pow(val, 6), 0),\n    y: y.reduce((sum, val) => sum + val, 0),\n    xy: x.reduce((sum, val, i) => sum + val * y[i], 0),\n    x2y: x.reduce((sum, val, i) => sum + Math.pow(val, 2) * y[i], 0),\n    x3y: x.reduce((sum, val, i) => sum + Math.pow(val, 3) * y[i], 0)\n  };\n  \n  // 构建系数矩阵\n  A.push([sums.x6, sums.x5, sums.x4, sums.x3]);\n  A.push([sums.x5, sums.x4, sums.x3, sums.x2]);\n  A.push([sums.x4, sums.x3, sums.x2, sums.x1]);\n  A.push([sums.x3, sums.x2, sums.x1, sums.x0]);\n  \n  B.push(sums.x3y);\n  B.push(sums.x2y);\n  B.push(sums.xy);\n  B.push(sums.y);\n  \n  // 高斯消元法求解\n  const coeffs = gaussianElimination(A, B);\n  \n  if (!coeffs) {\n    return {\n      type: 'polynomial',\n      formula: '无法拟合（矩阵奇异）',\n      coefficients: [0, 0, 0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  \n  const [a, b, c, d] = coeffs;\n  const predictedValues = x.map(val => a * Math.pow(val, 3) + b * Math.pow(val, 2) + c * val + d);\n  const rSquared = calculateRSquared(y, predictedValues);\n  \n  return {\n    type: 'polynomial',\n    formula: `y = ${a.toFixed(6)}x³ + ${b.toFixed(6)}x² + ${c.toFixed(6)}x + ${d.toFixed(6)}`,\n    coefficients: [a, b, c, d],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 幂函数拟合: y = a * x^b\nexport const powerFitting = (data: FittingData): FittingResult => {\n  const { x, y } = data;\n  const n = x.length;\n  \n  // 过滤掉x <= 0或y <= 0的点\n  const validIndices = x.map((val, i) => val > 0 && y[i] > 0 ? i : -1).filter(i => i !== -1);\n  const validX = validIndices.map(i => x[i]);\n  const validY = validIndices.map(i => y[i]);\n  const validN = validX.length;\n  \n  if (validN < 2) {\n    return {\n      type: 'power',\n      formula: '无法拟合（数据点不足）',\n      coefficients: [0, 0],\n      rSquared: 0,\n      predictedValues: new Array(n).fill(0)\n    };\n  }\n  \n  const sumLnX = validX.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnY = validY.reduce((sum, val) => sum + Math.log(val), 0);\n  const sumLnXLnY = validX.reduce((sum, val, i) => sum + Math.log(val) * Math.log(validY[i]), 0);\n  const sumLnX2 = validX.reduce((sum, val) => sum + Math.pow(Math.log(val), 2), 0);\n  \n  const b = (validN * sumLnXLnY - sumLnX * sumLnY) / (validN * sumLnX2 - Math.pow(sumLnX, 2));\n  const lnA = (sumLnY - b * sumLnX) / validN;\n  const a = Math.exp(lnA);\n  \n  const predictedValues = x.map(val => val > 0 ? a * Math.pow(val, b) : 0);\n  const rSquared = calculateRSquared(y, predictedValues);\n  \n  return {\n    type: 'power',\n    formula: `y = ${a.toFixed(6)} * x^${b.toFixed(6)}`,\n    coefficients: [a, b],\n    rSquared,\n    predictedValues\n  };\n};\n\n// 高斯消元法求解线性方程组\nconst gaussianElimination = (A: number[][], B: number[]): number[] | null => {\n  const n = A.length;\n  const augmented = A.map((row, i) => [...row, B[i]]);\n  \n  // 前向消元\n  for (let i = 0; i < n; i++) {\n    // 寻找主元\n    let maxRow = i;\n    for (let k = i + 1; k < n; k++) {\n      if (Math.abs(augmented[k][i]) > Math.abs(augmented[maxRow][i])) {\n        maxRow = k;\n      }\n    }\n    \n    // 交换行\n    [augmented[i], augmented[maxRow]] = [augmented[maxRow], augmented[i]];\n    \n    // 检查是否为奇异矩阵\n    if (Math.abs(augmented[i][i]) < 1e-10) {\n      return null;\n    }\n    \n    // 消元\n    for (let k = i + 1; k < n; k++) {\n      const factor = augmented[k][i] / augmented[i][i];\n      for (let j = i; j <= n; j++) {\n        augmented[k][j] -= factor * augmented[i][j];\n      }\n    }\n  }\n  \n  // 回代\n  const solution = new Array(n).fill(0);\n  for (let i = n - 1; i >= 0; i--) {\n    solution[i] = augmented[i][n];\n    for (let j = i + 1; j < n; j++) {\n      solution[i] -= augmented[i][j] * solution[j];\n    }\n    solution[i] /= augmented[i][i];\n  }\n  \n  return solution;\n};\n\n// 执行所有拟合算法\nexport const performAllFittings = (data: FittingData): FittingResult[] => {\n  return [\n    logarithmicFitting(data),\n    exponentialFitting(data),\n    polynomialFitting(data),\n    powerFitting(data)\n  ];\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}